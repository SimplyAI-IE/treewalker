Purpose.
We have a finance app that has n objects that have n equations that output to accounts. These accounts sit in a tree where their values feed upwards.
Although accounts can appear in many places they are only defined in one place, in a file called accounts.xxa. 

This is how an account is defined in Accounts.xxa
* Accounts have the following structure. 
   First char is always + or - to denote RELATIONSHIP DIRECTION to parent.
   Second and third char are ACCOUNT TYPE identifiers, typically one of an, ac, co, ap, cf, rv, ar.
   We define optional ACCOUNT MODIFIERS before the first space in the line. These are '$' '%' '#' and appear after the account ID. There can be any number of modifiers.
   The account may have a ACCOUNT CAPTION. Starting after the first space or account modifier, the caption runs to the end of the line.
   The ACCOUNT ID is what remains if we remove everything else.

Examples.
+AcMyFirstAccount$ My first account.
[RELATIONSHIP DIRECTION] = +
[ACCOUNT TYPE] = Ac
[ACCOUNT MODIFIERS] = $
[ACCOUNT CAPTION] = My first account.
[ACCOUNT ID] = MyFirstAccount

-CoMySecondAccount
[RELATIONSHIP DIRECTION] = -
[ACCOUNT TYPE] = Co
[ACCOUNT MODIFIERS] = 
[ACCOUNT CAPTION] = 
[ACCOUNT ID] = MySecondAccount

+RvMyThirdAccount#Third account
[RELATIONSHIP DIRECTION] = +
[ACCOUNT TYPE] = Rv
[ACCOUNT MODIFIERS] = #
[ACCOUNT CAPTION] = Third account
[ACCOUNT ID] = MyThirdAccount

* Some accounts are triplicate accounts.
   Some accounts have cash behaviours. This means that there is a cost, which you might not pay for 6 months.
   This means there is an amount to be paid and then finally we make the cash payment.
   For cash imapcting accounts these have the same ACCOUNT ID and ACCOUNT MODIFIERS but different ACCOUNT TYPES.
   For costs, the linked account types are Co, Ap, Cf. Cost, Account Payable and CashFlow.
   For income, the linked account types are Rv, Ar, Cf. Revenue, Account Receivable and Cashflow.

Examples.
+CoMyAccount01$ Cost of sheep  
+ApMyAccount01$ Sheep payable 
+CfMyAccount01$ Sheep paid 

+RvMyAccountSheep$ Revenue of sheep  
+ArMyAccountSheep$ Sheep receivble 
+CfMyAccountSheep$ Sheep received

The accounts can then be output to in objects. The best way to find if an object outputs to an account is:
* If the account you are searching for has an [ACCOUNT TYPE] of Cf 
   see if the triplicate Co or Rv exists 
      if it does use the Co or Rv that you found for [ACCOUNT TYPE] and append the [ACCOUNT ID] for comparison
      if it does not, use Cf[ACCOUNT ID] for comparison 
* If the account you are searching for does not [ACCOUNT TYPE] of Cf 
   Use the [ACCOUNT TYPE][ACCOUNT ID] for that account when doing a comparison.
Take that string and place it between ><
Search the XMO files for that string.

Examples.
[search account] -> [What we searh the xmo files for]
AnMySearchAccount -> ">AnMySearchAccount<"
CoMyOtherSearchAccount  -> ">CoMyOtherSearchAccount<"
CfThisOne   -> CoThisOne does not exist -> ">CfThisOne<"
CfThatOne   -> RvThatOne and ArThatOne do exist -> ">RvThatOne<"

Objects have equations that output to these accounts. Each *.xmo file with have one object inside <name> but can have many equations.
Each equation outputs to an account that is defines in accounts.xxa.
The object references the output account inside <AccountID> tags.
Inside the tags you will find only [ACCOUNT TYPE][ACCOUNT ID]

Sadly, our accounts file is poorly mananaged and somtimes accounts are replicated.
It is always the first instance of an account that is the owner of the [ACCOUNT TYPE][ACCOUNT ID].
Any other instances after that are ignored.

We have rules.
Objects can only output to unique accounts. They should not share the same output account as other objects.

Sadly we have many cases where these rules have been broken. 

We need an application to fix these two issues by doing the following.

Fixing non unique outputs.
If an account in BrokenTree is output to by more than one object
   For each object that has the same output account
      Create a UNIQUE IDENTIFIER for that object by using the initials of the object name followed by _
      Example
      My First Object = MFO_
      Blue apple Pie = BAP_
      Copy the entire line of the non unique account in Accounts.xxa
      Replace the [ACCOUNT TYPE] with Ac
      Insert the [UNIQUE IDENTIFIER] after the Ac
      Write this to Accounts.xxa as a new account.
      Update the XMO, replacing all instances with the new account.
      Append the following to updatedTree.txt
         The original non unique account as parent.
         The new object specific account as a child.
         IF the original non unique account was a triplicate account
            We must also append to updatedTree.txt with either the Co, Rv or Cf version of the account, depending on which we have already defined
            The new object specific account as a child of that account.
         (Basically if it is a triplicate the cloned account must be a child of (Rv & Cf) or (Co & Cf))

   Clarification
   Triplicate Cloning Rule (Final Spec-Aligned)
   If a clone is created for a triplicate account (i.e., the original is part of a Rv+Ar+Cf or Co+Ap+Cf set):
   Then you must add the clone as a child under both:
   The original account (e.g., +Rv..., +Co..., or +Cf...)
   The Cf account, if the original is Rv or Co
   The Rv or Co account, if the original is Cf
   ðŸ§  Translation:
   Original Type     Also Add Under
   Cf	               Rv or Co
   Rv	               Cf
   Co	               Cf

   Example
   AnMySearchAccount is used by My First Object & Blue apple Pie
   We read the definition from Accounts.xxa
   +AnMySearchAccount% I like eggs
   We create and add to accounts.xxa
   +AcMFO_MySearchAccount% I like eggs
   +AcBAP_MySearchAccount% I like eggs
   We create and add to updatedTree.txt
   +AnMySearchAccount% I like eggs
      +AcMFO_MySearchAccount% I like eggs
      +AcBAP_MySearchAccount% I like eggs
   We replace in My First Object.xmo
   >AnMySearchAccount< with >AcMFO_MySearchAccount<
   We replace in My Blue apple Pie.xmo
   >AnMySearchAccount< with >AcBAP_MySearchAccount<

   Example 2
   CfHomeBuyEquityReturn is used by My First Object & Blue apple Pie
   We read the definition from Accounts.xxa
   +CfHomeBuyEquityReturn$ Home buy cash receivable
   We search for CoHomeBuyEquityReturn - does not exist
   We search for RvHomeBuyEquityReturn - exists
   We search for ArHomeBuyEquityReturn - exists - therefore a triplicate 
   We create and add to accounts.xxa
   +AcMFO_HomeBuyEquityReturn$ Home buy cash receivable
   +AcBAP_HomeBuyEquityReturn$ Home buy cash receivable
   We create and add to updatedTree.txt
   +CfHomeBuyEquityReturn$ Home buy cash receivable
      +AcMFO_HomeBuyEquityReturn$ Home buy cash receivable
      +AcBAP_HomeBuyEquityReturn$ Home buy cash receivable
   +RvHomeBuyEquityReturn$ Home buy cash receivable
      +AcMFO_HomeBuyEquityReturn$ Home buy cash receivable
      +AcBAP_HomeBuyEquityReturn$ Home buy cash receivable
   We replace in My First Object.xmo
   >CfHomeBuyEquityReturn< with >AcMFO_HomeBuyEquityReturn<
   We replace in My Blue apple Pie.xmo
   >CfHomeBuyEquityReturn< with >AcBAP_HomeBuyEquityReturn<
   
ðŸ”„ Sample Data Specification (Revised and Comprehensive)
For sample data:
Each .xmo file should represent one object only.
Each object must contain multiple output <AccountID> entries, representing all the accounts it writes to.

âœ… Include:
All Account Types
Include at least one output for each of the following:
An, Ac, Co, Ap, Cf, Rv, Ar
Triplicate Structures
Simulate cost triplicates: Co + Ap + Cf
Simulate income triplicates: Rv + Ar + Cf
Include:
Full triplicates (all three types)
Partial triplicates (e.g. Co + Cf, Rv + Cf)
Orphaned Cf (only Cf exists; fall back to it)
Conflict Scenarios
Multiple .xmo files should output to the same:
Triplicate group (e.g. all to CfForecast)
Standard account (e.g. multiple to AnAdminCost)
These should trigger account cloning logic
Non-conflict Scenarios
Some .xmo files must output only to accounts used by one object
These should not trigger cloning
Modifier Coverage
Include accounts with:
No modifiers
Single modifiers ($, %, #)
Multiple modifiers ($%, %#, $%#)
Volume & Variation
Create at least 30 .xmo files
Each file should have 5â€“10 output accounts
Use diverse object names to ensure unique identifier testing

ðŸ“„ Examples
Object "Capital Project Alpha"
Outputs to: CoSitePrep$, ApSitePrep$, CfSitePrep$, AnBuildCost, AcLocalFee
Object "Sales Forecast FY26"
Outputs to: RvSales$%, ArSales$%, CfSales$%, AcCommission
Object "Operations Solo"
Outputs to: AcInternalRevenue, AcHRCost, AnHQAdmin

1. ðŸ—‚ File Role Definitions
- tree.txt: Input. Contains the initial hierarchical account structure.
- Accounts.xxa: Updated output file. New cloned accounts are appended here.
- .xmo files: Input/output. Updated with cloned account references.
- updatedTree.txt: Output. Shows the new structure with original accounts as parents, cloned accounts as children.